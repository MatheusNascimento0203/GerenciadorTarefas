@using GerenciadorTarefas.ViewModels
@model IEnumerable<TarefaViewModel>

@{
    ViewData["Title"] = "Home - Gerenciador Tarefas";
}

<div class="container-principal">
    <div class="container-tarefa uk-flex uk-flex-middle uk-flex-center uk-margin-medium-top">
        <div>
            <h2>Gerenciador de Tarefas</h2>
            <p>Organize suas Tarefas forma eficiente</p>
        </div>
        <div>
            <button class="uk-button uk-button-primary uk-border-rounded" uk-toggle="target: #modal-tarefa">+ NOVA TAREFA</button>            
        </div>
        <div id="modal-tarefa" uk-modal>
            <div class="uk-modal-dialog uk-modal-body uk-border-rounded">
                <button class="uk-modal-close-default" type="button" uk-close></button>
                <h2 id="titulo-modal" class="uk-modal-title">Adicionar Tarefa</h2>
                <form>
                    <div class="uk-margin uk-border-rounded">
                        <label for="descricaoTarefa" class="uk-text-bold">Nome da Tarefa</label>
                        <input id="descricaoTarefa" class="uk-input" type="text" placeholder="Adicione o nome da tarefa..." aria-label="Input">
                    </div>
                    <div class="uk-margin uk-border-rounded">
                        <label for="dataVencimento" class="uk-text-bold">Data de Vencimento</label>
                        <input id="dataVencimento" class="uk-input" type="date" aria-label="Input">                        
                    </div>
                    <div class="uk-flex uk-flex-middle">
                        <input id="tarefaUrgente" class="uk-checkbox uk-border-rounded uk-margin-xsmall-top uk-margin-small-right" type="checkbox">
                        <p class="uk-margin-remove-bottom uk-margin-remove-top uk-text-bold">Tarefa Urgente</p>
                    </div>
                    <p class="uk-text-right">
                        <button class="uk-button uk-button-default uk-modal-close uk-border-rounded uk-text-bold" type="button">Cancelar</button>
                        <button class="uk-button uk-button-primary uk-border-rounded" type="submit">Salvar</button>
                    </p>
                </form>
            </div>
        </div>        
    </div>
    <form class="container-pesquisar uk-inline">
        <span class="uk-form-icon" uk-icon="icon: search"></span>
        <input class="input-pesquisar uk-input uk-border-rounded" type="search" placeholder="Pesquisar Tarefas..." aria-label="search" id="descricaoPesquisarTarefa" oninput="pesquisarTarefa()">
    </form>
    <div class="container-filtros">
        <p class="uk-margin-small-top uk-margin-remove-bottom uk-text-bold">Filtros</p>
        <div class="container-button-filtros uk-flex uk-flex-center uk-flex-middle uk-flex-between uk-background-primary uk-border-rounded" >
            <button class="button-container-selected uk-border-rounded uk-margin-small-left" onclick="filtrarTarefasTodas(); selecionarBotaoAtivo(this)">Todas</button>
            <button class="button-container-deselected uk-flex uk-flex-center uk-flex-middle" style="gap: 4px;" onclick="filtrarTarefasPendentes(); selecionarBotaoAtivo(this);">
                <span uk-icon="icon: clock"></span> 
                Pendentes
            </button>
            <button class="button-container-deselected uk-flex uk-flex-center uk-flex-middle" style="gap: 4px;" onclick="filtrarTarefasConcluidas(); selecionarBotaoAtivo(this);" ">
                <span uk-icon="icon: check"></span> 
                Concluídas
            </button>
            <button class="button-container-deselected uk-margin-small-right uk-flex uk-flex-center uk-flex-middle" style="gap: 4px;" onclick="filtrarTarefasUrgentes(); selecionarBotaoAtivo(this);">
                <span uk-icon="icon: warning"></span> 
                Urgentes
            </button>
        </div>
    </div>

     <div class="container-resultados uk-margin-medium-bottom">
        @if (Model != null && Model.Any())
        {
            @foreach (var tarefa in Model)
            {
                var estaVencida = tarefa.DataVencimento.Date < DateTime.Now.Date && !tarefa.Concluida;
                var estaUrgente = tarefa.Urgente && !tarefa.Concluida && tarefa.DataVencimento.Date >= DateTime.Now.Date;
                var estaconcluida = tarefa.Concluida && !estaVencida;

                <div id= "tarefa-@tarefa.Id" class="container-resultado @(estaVencida ? "vencida" : "") @(estaUrgente ? "urgente" : "") @(estaconcluida ? "concluida" : "") uk-margin-small-top uk-border-rounded">
                    <div class="uk-flex uk-flex-center uk-flex-middle uk-flex-between uk-margin-small-top">
                        <div class="uk-flex uk-flex-middle uk-margin-small-left">
                            <input id="ckeckbok-concluida" class="uk-checkbox uk-border-rounded uk-margin-small-right" type="checkbox" onchange="concluirTarefa('@Url.Action("ConcluirTarefa", "Home", new { tarefaId = @tarefa.Id })', this.checked, this)" @(tarefa.Concluida ? "checked" : "")>
                            <div>
                                <p id="tarefa-descricao" class=" @(tarefa.Concluida ? "descricao-concluida" : "") uk-margin-remove-bottom uk-text-bold">@tarefa.Descricao</p>
                                <p class="uk-margin-remove-top uk-margin-remove-bottom">
                                    <span uk-icon="icon: calendar"></span>
                                    @tarefa.DataVencimento.ToString("dd 'de' MMMM 'de' yyyy")
                                </p>
                            </div>
                        </div>
                        <div class="uk-margin-small-right uk-flex uk-flex-middle uk-flex-center uk-flex-between" style="gap: 8px;">
                            @if (@tarefa.Urgente && @tarefa.DataVencimento.Date >= DateTime.Now.Date) 
                            {     
                                <div class="uk-flex uk-flex-middle uk-flex-center uk-border-rounded badge-urgente" style="gap: 4px;">
                                    <span uk-icon="icon: warning; ratio: 1"></span>
                                    <p>Urgente</p>
                                </div>
                            }
                            @if (@tarefa.DataVencimento.Date < DateTime.Now.Date)
                            {
                                <div class="uk-text-center uk-border-rounded badge-atrasada">
                                    <p class="uk-text-bold uk-margin-xsmall-top">Vencida</p>
                                </div>

                            }
                            <button class="button-editar" onclick="editarTarefa('@Url.Action("AtualizarTarefa", "Home", new { tarefaId = @tarefa.Id })', {id: @tarefa.Id, descricao: '@tarefa.Descricao',
                            dataVencimento: '@tarefa.DataVencimento.ToString("yyyy-MM-dd")',
                            urgente: @tarefa.Urgente.ToString().ToLower()})" >
                                <span uk-icon="icon: pencil"></span>
                            </button>
                            <button class="button-excluir" onclick="removerTarefa('@Url.Action("RemoverTarefa", "Home", new { tarefaId = @tarefa.Id})', @tarefa.Id)" >
                                <span uk-icon="icon: trash"></span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

<script>

    let modalEditar = false

    $('form').on('submit', function (e) {        
        e.preventDefault();

        if (modalEditar) {
            editarTarefa()
        } else {
            cadastrarTarefa();
        }
    });
    
    function cadastrarTarefa() {
        var descricao = $('#descricaoTarefa').val();
        var dataVencimento = $('#dataVencimento').val();
        var dataVencimentoObj = new Date(dataVencimento);
        var dataAtual = new Date();
        dataAtual.setHours(0,0,0,0);
        var dataAtualFormatada = dataAtual.toISOString().split('T')[0]; 
        var dataVencimentoFormatada = dataVencimentoObj.toISOString().split('T')[0];
        var urgente = $('#tarefaUrgente').is(':checked');

        //VALIDANDO CAMPO DESCRIÇÃO
        if (descricao.trim() === '') {
        UIkit.notification({
            message: 'Nome da Tarefa é obrigatório.',
            status: 'danger',
            pos: 'bottom-center',            
            timeout: 1500,
        });
            return;
        } 

        //VALIDANDO CAMPO DATA VENCIMENTO
        if (dataVencimento.trim() === '') {
        UIkit.notification({
            message: 'Data de vencimento é obrigatória.',
            status: 'danger',
            pos: 'bottom-center',            
            timeout: 1500,
        });
            return;
        } 

        if (dataVencimentoFormatada < dataAtualFormatada) {
             UIkit.notification({
            message: 'Data de vencimento deve ser maior que a data atual.',
            status: 'danger',
            pos: 'bottom-center',            
            timeout: 1500,
        });
            return;
        }

        var tarefa = { 
            Descricao: descricao,
            DataVencimento: dataVencimento,
            Urgente: urgente,
            Concluida: false
        }

        $.ajax({
            url: '@Url.Action("CriarTarefa", "Home")',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(tarefa),
            success: function() {
                UIkit.notification({
                    message: 'Tarefa adicionada com sucesso!',
                    status: 'success',
                    pos: 'top-center',
                    timeout: 1500
                });
                setTimeout(() => {
                    location.reload();
                }, 1000);
            },
            error: function () {
                UIkit.notification({
                    message: 'Erro ao adicionar tarefa!',
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 1500
                });
            }
        });
    }

    function editarTarefa(url, tarefa) {
        modalEditar = true;
        UIkit.modal('#modal-tarefa').show();
        $('#titulo-modal').text('Editar Tarefa');
        $('#descricaoTarefa').val(tarefa.descricao);
        const dataFormatada = new Date(tarefa.dataVencimento).toISOString().split('T')[0];
        $('#dataVencimento').val(dataFormatada);
        $('#tarefaUrgente').is(':checked');

        const objTarefa = {
            Id: tarefa.id,
            Descricao: tarefa.descricao,
            DataVencimento: dataFormatada,
            Urgente: tarefa.urgente,
            Concluida: tarefa.concluida
        };

        $.ajax({
            url: url,
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(objTarefa),
            success: function() {
                UIkit.notification({
                    message: 'Tarefa editada com sucesso!',
                    status: 'success',
                    pos: 'top-center',
                    timeout: 1500
                });
                setTimeout(() => {
                    location.reload();
                }, 1000);
            },
            error: function () {
                UIkit.notification({
                    message: 'Erro ao editar tarefa!',
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 1500
                });
            }
        });
        
        // Reseta o modo
        modoEdicao = false;
    

    }

    function removerTarefa(url, tarefaId) {
         $.post(url)
            .done(function () {
                $(`#tarefa-${tarefaId}`).remove();
                UIkit.notification({
                    message: 'Tarefa removida com sucesso!',
                    status: 'success',
                    pos: 'top-center',
                    timeout: 1500
                });
            })
            .fail(function () {
                UIkit.notification({
                    message: 'Erro ao remover tarefa!',
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 1500
                });
            });
    }

    function concluirTarefa(url, tarefaConcluida, checkboxElement) {
    $.post(url)
        .done(function () {
            const tarefaContainer = checkboxElement.closest('.container-resultado');
            const descricao = tarefaContainer.querySelector('#tarefa-descricao');

            if (tarefaConcluida) {
                tarefaContainer.classList.add('concluida');
                descricao.classList.add('descricao-concluida');
            } else {
                tarefaContainer.classList.remove('concluida');
                descricao.classList.remove('descricao-concluida');
                tarefaContainer.classList.add('urgente');
            }

            UIkit.notification({
                message: tarefaConcluida
                    ? 'Tarefa concluída com sucesso!'
                    : 'Tarefa desmarcada como concluída!',
                status: 'success',
                pos: 'top-center',
                timeout: 1500
            });
        })
        .fail(function () {
            UIkit.notification({
                message: 'Erro ao concluir tarefa!',
                status: 'danger',
                pos: 'top-center',
                timeout: 1500
            });
        });
    }

    function pesquisarTarefa() {
        var tarefaPesquisada = $('#descricaoPesquisarTarefa').val().toLowerCase();
        $('.container-resultado').each(function() {
            var tarefaDescricao = $(this).find('#tarefa-descricao').text().toLowerCase();
            if (tarefaDescricao.includes(tarefaPesquisada)) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    function filtrarTarefasUrgentes() {
        $('.container-resultado').each(function() {
            var tarefaUrgente = $(this).find('.badge-urgente').length > 0;
            if (tarefaUrgente) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    function filtrarTarefasConcluidas() {
        $('.container-resultado').each(function() {
            var tarefaConcluida = $(this).find('#ckeckbok-concluida').is(':checked');
            if (tarefaConcluida) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    function filtrarTarefasPendentes() {
        $('.container-resultado').each(function() {
            var tarefaConcluida = $(this).find('#ckeckbok-concluida').is(':checked');
            if (!tarefaConcluida) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    function filtrarTarefasTodas() {
        $('.container-resultado').each(function() {
            $(this).show();
        });
    }

    function selecionarBotaoAtivo(botaoClicado) {
        document.querySelectorAll('.button-container-selected, .button-container-deselected')
            .forEach(btn => {
                btn.classList.remove('button-container-selected');
                btn.classList.add('button-container-deselected');
            });

        botaoClicado.classList.remove('button-container-deselected');
        botaoClicado.classList.add('button-container-selected');
}

</script>
